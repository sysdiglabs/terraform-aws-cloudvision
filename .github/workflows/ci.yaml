name: CI - format, test

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master

# FIXME. terraform init && validate should be on a matrix-strategy per example use-case
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: |
        cd examples/organizational_cloudvision
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        cd examples/organizational_cloudvision
        terraform validate -no-color

# FIXME. requires aws credentials setup
#    - name: Terraform Validate
#      id: plan
#      if: github.event_name == 'pull_request'
#      run: |
#        terraform plan -no-color -var sysdig_secure_api_token=foo -var org_cloudvision_account_id=bar
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        AWS_REGION: ${{ secrets.AWS_REGION }}
#      continue-on-error: true
#      shell: bash

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request' && (steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure')
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          <!--
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`* -->`;          
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    #  run: terraform apply -auto-approve
